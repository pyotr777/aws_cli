#!/bin/bash
# Prints ID, State and Tags for all instances.
# With -t option prints only IDs and Name tags.
# With instance ID after option -t shows only Name tag for the given instance.

usage=$(cat <<USAGEBLOCK
Usage:
$(basename $0) [-t [<instance ID>]]

With no options prints ID, State and Tags for all instances.
With -t option prints only IDs and Name tags.
With instance ID after option -t shows only Name tag for the given instance.
USAGEBLOCK
)

while test $# -gt 0; do
    case "$1" in
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        -t)
			PRINT_TAG="1"
			ID="$2";shift;
            ;;
        --)
            shift
            break;;
        -*)
            echo "Invalid option: $1"
            echo "$usage"
            exit 1;;
    esac
    shift
done

#echo "PRINT_TAG=$PRINT_TAG, ID=$ID."

if [[ -z "$PRINT_TAG" ]]; then
	LS=$(aws ec2 describe-instances --output json | jq -r -c ".Reservations[] | .Instances[] | [.InstanceId, .State.Name, .KeyName,.ImageId] | @csv" | sed 's/\"//g')
	arr=( $(echo "$LS") )
	FORMAT='%-20s\t%-15s\t%-15s\t%-20s\t%-15s\t%-15s\n'
	printf $FORMAT "ID" "TAG" "STATE" "IP" "KEY" "IMAGE"
	for line in "${arr[@]}"; do
		IFS=$','; words=( $(echo "$line") )
		ID=${words[0]}
		TAG=$(awstag $ID)
		IP=$(aws ec2 describe-instances --instance-ids $ID --query 'Reservations[0].Instances[0].PublicIpAddress')
		printf $FORMAT "$ID" "$TAG" "${words[1]}" "$IP" "${words[2]}" "${words[3]}"
	done
else
	if [[ -z "$ID" ]]; then
		aws ec2 describe-tags --output text | awk '{ print $3"\t"$5 }'
	else
		aws ec2 describe-tags --filter "Name=resource-id,Values=$ID" --output text | awk '{ print $3"\t"$5 }'
	fi
fi

